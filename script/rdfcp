#!/usr/bin/perl
use strict;
use warnings;
use LWP::UserAgent;
use RDF::Trine::Parser;
use HTTP::Request::Common qw(GET PUT);

our $VERSION	= '0.01';
my $from		= shift;
my $to			= shift;

my $ok	= check($from, $to);
unless ($ok) {
	print <<"END";
Usage:
	$0 http://remote/graph local.rdf
	$0 local.rdf http://remote/graph

END
	exit 1;
}

my $ua	= LWP::UserAgent->new();
$ua->agent("rdfcp/$VERSION ");
$ua->from('dev@lists.perlrdf.org');
if (is_remote($from)) {
	get($ua, $from, $to);
} else {
	put($ua, $from, $to);
}

sub check {
	my $remote	= 0;
	my $local	= 0;
	foreach my $spec (@_) {
		if (is_remote($spec)) {
			$remote++;
		} else {
			$local++;
		}
	}
	return ($local == 1 and $remote == 1);
}

sub is_remote {
	no warnings 'uninitialized';
	my $spec	= shift;
	return ($spec =~ m<^https?://>);
}

sub get {
	my $ua		= shift;
	my $from	= shift;
	my $to		= shift;
	my $req		= GET($from);
	my $parser	= RDF::Trine::Parser->guess_parser_by_filename($to);
	if ($parser) {
		my $type	= $parser->media_type;
		if ($type) {
			$req->header( 'Accept' => $type );
		}
	}
	my $resp	= $ua->request($req);
	if ($resp->is_success) {
		open(my $fh, '>', $to) or die $!;
		print {$fh} $resp->decoded_content;
		close($fh);
	} else {
		warn $resp->status_line . "\n";
		exit 1;
	}
}

sub put {
	my $ua		= shift;
	my $from	= shift;
	my $to		= shift;
	
	my $rdf		= do { local($/) = undef; open(my $fh, '<', $from) or die $!; <$fh> };
	my $req		= PUT( $to, Content => $rdf );
	my $parser	= RDF::Trine::Parser->guess_parser_by_filename($from);
	if ($parser) {
		my $type	= $parser->media_type;
		if ($type) {
			$req->header( 'Content-Type' => $type );
		}
	}
	my $resp	= $ua->request( $req );
	if ($resp->is_success) {
	} else {
		warn $resp->status_line . "\n";
		exit 1;
	}
}
